{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"#####","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":6.52,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
{"lines":[{"count":"-","code":"#include <stdio.h>"},{"count":"-","code":"#include <stdlib.h>"},{"count":"-","code":"#include \"logger.h\""},{"count":"-","code":""},{"count":"#####","code":"void add(int **a, int **b, int r, int c)"},{"count":"-","code":"{"},{"count":"-","code":" int i, j;"},{"count":"-","code":""},{"count":"#####","code":" for (i = 0; i < r; i++)"},{"count":"-","code":" {"},{"count":"#####","code":"  for (j = 0; j < c; j++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i][j] = a[i][j] + b[i][j];"},{"count":"-","code":"  }"},{"count":"-","code":" }"},{"count":"#####","code":"}"},{"count":"-","code":""},{"count":"1","code":"int main()"},{"count":"-","code":"{"},{"count":"-","code":""},{"count":"1","code":" int n = 100, rows, cols, i, j, **a, **b;"},{"count":"1","code":" usleep(200000);"},{"count":"2","code":" while (n != 0)"},{"count":"-","code":" {"},{"count":"1","code":"  usleep(200000);"},{"count":"1","code":"  scanf(\"%d\", &rows);"},{"count":"#####","code":"  scanf(\"%d\", &cols);"},{"count":"-","code":"  if(0)"},{"count":"-","code":"  {"},{"count":"-","code":"   printf(\"fkhdbf\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  a = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  b = malloc(rows * sizeof(int *));"},{"count":"#####","code":"  usleep(200000);"},{"count":"-","code":"  // for each row allocate cols int"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   a[i] = malloc(cols * sizeof(int));"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"#####","code":"   b[i] = malloc(cols * sizeof(int));"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    a[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    int num = (rand() %"},{"count":"-","code":"         (9999 - 1 + 1)) +"},{"count":"-","code":"        1;"},{"count":"#####","code":"    usleep(20000);"},{"count":"#####","code":"    b[i][j] = num;"},{"count":"-","code":"   }"},{"count":"-","code":"  }"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  add(a, b, rows, cols);"},{"count":"-","code":""},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  for (i = 0; i < rows; i++)"},{"count":"-","code":"  {"},{"count":"#####","code":"   for (j = 0; j < cols; j++)"},{"count":"-","code":"   {"},{"count":"#####","code":"    printf(\"%d \", a[i][j]);"},{"count":"-","code":"   }"},{"count":"#####","code":"   usleep(200000);"},{"count":"#####","code":"   printf(\"\\n\");"},{"count":"-","code":"  }"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(a);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  free(b);"},{"count":"#####","code":"  usleep(200000);"},{"count":"#####","code":"  n--;"},{"count":"-","code":" }"},{"count":"-","code":""},{"count":"#####","code":" return 0;"},{"count":"-","code":"}"}],"source":"code.c","graph":"code.gcno","data":"code.gcda","runs":"1","programs":"1","memory":83396,"progress":{"code.c":{"percent":13.04,"total":46}},"runId":"code.c-1537369241248-11821","startTime":"1537369241248","sourceDir":"/media/mdakram28/Data/projects/hda/hda-server/example/sources"}
