        -:    0:Source:code.c
        -:    0:Graph:code.gcno
        -:    0:Data:code.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "logger.h"
        -:    4:
        1:    5:void add(int **a, int **b, int r, int c)
        -:    6:{
        -:    7:	int i, j;
        -:    8:
       21:    9:	for (i = 0; i < r; i++)
        -:   10:	{
      420:   11:		for (j = 0; j < c; j++)
        -:   12:		{
      400:   13:			a[i][j] = a[i][j] + b[i][j];
        -:   14:		}
        -:   15:	}
        1:   16:}
        -:   17:
        1:   18:int main()
        -:   19:{
        -:   20:
        1:   21:	int n = 100, rows, cols, i, j, **a, **b;
        1:   22:	usleep(200000);
        3:   23:	while (n != 0)
        -:   24:	{
        2:   25:		usleep(200000);
        2:   26:		scanf("%d", &rows);
        1:   27:		scanf("%d", &cols);
        -:   28:		if(0)
        -:   29:		{
        -:   30:			printf("fkhdbf");
        -:   31:		}
        1:   32:		a = malloc(rows * sizeof(int *));
        1:   33:		b = malloc(rows * sizeof(int *));
        1:   34:		usleep(200000);
        -:   35:		// for each row allocate cols int
       21:   36:		for (i = 0; i < rows; i++)
        -:   37:		{
       20:   38:			a[i] = malloc(cols * sizeof(int));
        -:   39:		}
        1:   40:		usleep(200000);
       21:   41:		for (i = 0; i < rows; i++)
       20:   42:			b[i] = malloc(cols * sizeof(int));
        -:   43:
        1:   44:		usleep(200000);
       21:   45:		for (i = 0; i < rows; i++)
        -:   46:		{
      419:   47:			for (j = 0; j < cols; j++)
        -:   48:			{
      399:   49:				int num = (rand() %
        -:   50:						   (9999 - 1 + 1)) +
        -:   51:						  1;
      399:   52:				usleep(20000);
      399:   53:				a[i][j] = num;
        -:   54:			}
        -:   55:		}
        -:   56:
       21:   57:		for (i = 0; i < rows; i++)
        -:   58:		{
      420:   59:			for (j = 0; j < cols; j++)
        -:   60:			{
      400:   61:				int num = (rand() %
        -:   62:						   (9999 - 1 + 1)) +
        -:   63:						  1;
      400:   64:				usleep(20000);
      400:   65:				b[i][j] = num;
        -:   66:			}
        -:   67:		}
        -:   68:
        1:   69:		usleep(200000);
        1:   70:		add(a, b, rows, cols);
        -:   71:
        1:   72:		usleep(200000);
       21:   73:		for (i = 0; i < rows; i++)
        -:   74:		{
      420:   75:			for (j = 0; j < cols; j++)
        -:   76:			{
      400:   77:				printf("%d ", a[i][j]);
        -:   78:			}
       20:   79:			usleep(200000);
       20:   80:			printf("\n");
        -:   81:		}
        1:   82:		usleep(200000);
        1:   83:		free(a);
        1:   84:		usleep(200000);
        1:   85:		free(b);
        1:   86:		usleep(200000);
        1:   87:		n--;
        -:   88:	}
        -:   89:
    #####:   90:	return 0;
        -:   91:}
